Exerc√≠cios
Hora de p√¥r a m√£o na massa!
back-end
Antes de come√ßar: versionando seu c√≥digo
Para versionar seu c√≥digo, utilize o seu reposit√≥rio de exerc√≠cios. üòâ
Abaixo voc√™ vai ver exemplos de como organizar os exerc√≠cios do dia em uma branch, com arquivos e commits espec√≠ficos para cada exerc√≠cio. Voc√™ deve seguir este padr√£o para realizar os exerc√≠cios a seguir.
Abra a pasta de exerc√≠cios:
Copiar
$ cd ~/trybe-exercicios
Certifique-se de que est√° na branch main e ela est√° sincronizada com a remota. Caso voc√™ tenha arquivos modificados e n√£o comitados, dever√° fazer um commit ou checkout dos arquivos antes deste passo.
Copiar
$ git checkout main
$ git pull
A partir da main, crie uma branch com o nome exercicios/25.3 (bloco 25, dia 3)
Copiar
$ git checkout -b exercicios/25.3
Caso seja o primeiro dia deste m√≥dulo, crie um diret√≥rio para ele e o acesse na sequ√™ncia:
Copiar
$ mkdir back-end
$ cd back-end
Caso seja o primeiro dia do bloco, crie um diret√≥rio para ele e o acesse na sequ√™ncia:
Copiar
$ mkdir bloco-25-introducao-ao-desenvolvimento-web-com-nodejs
$ cd bloco-25-introducao-ao-desenvolvimento-web-com-nodejs
Crie um diret√≥rio para o dia e o acesse na sequ√™ncia:
Copiar
$ mkdir dia-3-testes-com-nodejs
$ cd dia-3-testes-com-nodejs
Os arquivos referentes aos exerc√≠cios deste dia dever√£o ficar dentro do diret√≥rio ~/trybe-exercicios/back-end/block-25-introducao-ao-desenvolvimento-web-com-nodejs/dia-3-testes-com-nodejs. Lembre-se de fazer commits pequenos e com mensagens bem descritivas, preferencialmente a cada exerc√≠cio resolvido.

Verifique os arquivos alterados/adicionados:
Copiar
$ git status
On branch exercicios/25.3
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

  modified:   exercicio-1

Adicione os arquivos que far√£o parte daquele commit:
Copiar
# Se quiser adicionar os arquivos individualmente
$ git add caminhoParaArquivo

# Se quiser adicionar todos os arquivos de uma vez, por√©m, atente-se
para n√£o adicionar arquivos indesejados acidentalmente
$ git add --all

Fa√ßa o commit com uma mensagem descritiva das altera√ß√µes:
Copiar
$ git commit -m "Mensagem descrevendo altera√ß√µes"
Voc√™ pode visualizar o log de todos os commits j√° feitos naquela branch com git log.
Copiar
$ git log
commit 100c5ca0d64e2b8649f48edf3be13588a77b8fa4 (HEAD -> exercicios/25.3)
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 17:48:01 2019 -0300

    Exercicio 2 - mudando o evento de click para mouseover, tirei o alert e coloquei pra quando clicar aparecer uma imagem do lado direito da tela

commit c0701d91274c2ac8a29b9a7fbe4302accacf3c78
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 16:47:21 2019 -0300

    Exercicio 2 - adicionando um alert, usando fun√ß√£o e o evento click

commit 6835287c44e9ac9cdd459003a7a6b1b1a7700157
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 15:46:32 2019 -0300

    Resolvendo o exerc√≠cio 1 usando eventListener
Agora que temos as altera√ß√µes salvas no reposit√≥rio local precisamos envi√°-las para o reposit√≥rio remoto. No primeiro envio, a branch exercicios/25.3 n√£o vai existir no reposit√≥rio remoto, ent√£o precisamos configurar o remote utilizando a op√ß√£o --set-upstream (ou -u, que √© a forma abreviada).
Copiar
$ git push -u origin exercicios/25.3
Ap√≥s realizar o passo 9, podemos abrir a Pull Request a partir do link que aparecer√° na mensagem do push no terminal, ou na p√°gina do seu reposit√≥rio de exerc√≠cios no GitHub atrav√©s de um bot√£o que aparecer√° na interface. Escolha a forma que preferir e abra a Pull Request. De agora em diante, voc√™ repetir√° o fluxo a partir do passo 7 para cada exerc√≠cio adicionado, por√©m como j√° definimos a branch remota com -u anteriormente, agora podemos simplificar os comandos para:
Copiar
# Quando quiser enviar para o reposit√≥rio remoto
$ git push

# Caso voc√™ queria sincronizar com o remoto, poder√° utilizar apenas
$ git pull
Quando terminar os exerc√≠cios, seus c√≥digos devem estar todos commitados na branch exercicios/25.3, e dispon√≠veis no reposit√≥rio remoto do GitHub. Pra finalizar, compartilhe o link da Pull Request no canal de Code Review para a monitoria e/ou colegas revisarem. Fa√ßa review voc√™ tamb√©m, lembre-se que √© muito importante para o seu desenvolvimento ler o c√≥digo de outras pessoas. ü§úüèºü§õüèº
¬© Trybe 2022
¬∑
Manual da Pessoa Estudante
Feito e constantemente atualizado pelo time Trybe com Elixir, Phoenix, React, Tailwind CSS e üíö

Agora a pr√°tica
Exerc√≠cio 1 : Estruture os testes utilizando mocha e chai para um fun√ß√£o que ir√° dizer se um n√∫mero √© "positivo", "negativo" ou "neutro":
Essa fun√ß√£o ir√° receber um n√∫mero como par√¢metro e retornar uma string como resposta;
Quando o n√∫mero passado for maior que 0 dever√° retornar "positivo", quando for menor que 0 dever√° retornar "negativo" e quando igual a 0 dever√° retornar "neutro";
Descreva todos os cen√°rio de teste utilizando describes ;
Descreva todos os testes que ser√£o feitos utilizando its ;
Crie as asser√ß√µes validando se os retornos de cada cen√°rio tem o tipo e o valor esperado.
Exerc√≠cio 2 : Implemente a fun√ß√£o apresentada no exerc√≠cio 1, garantindo que ela ir√° passar em todos os testes que voc√™ escreveu.
DICA : Lembre-se de adicionar o script de test no package.json e de instalar as depend√™ncias.
Exerc√≠cio 3 Adicione √† fun√ß√£o um tratamento para casos em que o par√¢metro informado n√£o seja do tipo Number .
Adicione o cen√°rio em seu arquivo de testes, passando um valor de tipo diferente a Number para a fun√ß√£o;
Adicione uma asser√ß√£o para esperar que o valor retornado para esse caso seja igual uma string "o valor deve ser um n√∫mero";
Implemente em sua fun√ß√£o tal valida√ß√£o para que o teste passe.
Exerc√≠cio 4 Crie testes para uma fun√ß√£o que escrever√° um conte√∫do em um arquivo espec√≠fico.
Essa fun√ß√£o dever√° receber dois par√¢metros: o nome do arquivo e o conte√∫do desse arquivo.
Ap√≥s concluir a escrita do arquivo ela dever√° retornar um ok .
Descreva todos os cen√°rios de teste utilizando describes ;
Descreva todos os testes que ser√£o feitos utilizando its ;
Crie as asser√ß√µes validando se o retorno da fun√ß√£o possui o valor e tipo esperado.
Exerc√≠cio 5 Implemente a fun√ß√£o descrita no exerc√≠cio 4.
Crie a fun√ß√£o descrita no exerc√≠cio 4 utilizando o m√≥dulo fs do node.
Adapte os testes adicionando stub ao m√≥dulo utilizado do fs , isolando assim o teste.
Garanta que todos os testes escritos no exerc√≠cio 4 ir√£o passar com sucesso.





Gabarito dos exerc√≠cios
A seguir encontra-se uma sugest√£o de solu√ß√£o para os exerc√≠cios propostos.
Exerc√≠cio 1
Estruture os testes utilizando mocha e chai para um fun√ß√£o que ir√° dizer se um n√∫mero √© "positivo", "negativo" ou "neutro":
Essa fun√ß√£o ir√° receber um n√∫mero como par√¢metro e retornar uma string como resposta;
Quando o n√∫mero passado for maior que 0 dever√° retornar "positivo", quando for menor que 0 dever√° retornar "negativo" e quando igual a 0 dever√° retornar "neutro";
Descreva todos os cen√°rios de teste utilizando describes ;
Descreva todos os testes que ser√£o feitos utilizando its ;
Crie as asser√ß√µes validando se os retornos de cada cen√°rio tem o tipo e o valor esperado.
Resolu√ß√£o
Copiar
const { expect } = require('chai');

const numNaturalFn = require('./numerosNaturais');

describe('Executa a fun√ß√£o numNaturalFn', () => {
  describe('quando o n√∫mero for maior que 0', () => {
    describe('a resposta', () => {
      it('√© uma "string"', () => {
        const resposta = numNaturalFn(10);

        expect(resposta).to.be.a('string');
      });

      it('√© igual a "positivo"', () => {
        const resposta = numNaturalFn(10);

        expect(resposta).to.be.equals('positivo');
      });
    });
  });

  describe('quando o n√∫mero for menor que 0', () => {
    describe('a resposta', () => {
      it('√© uma "string"', () => {
        const resposta = numNaturalFn(-10);

        expect(resposta).to.be.a('string');
      });

      it('√© igual a "negativo"', () => {
        const resposta = numNaturalFn(-10);

        expect(resposta).to.be.equals('negativo');
      });
    });
  });

  describe('quando o n√∫mero for igual a 0', () => {
    describe('a resposta', () => {
      it('√© uma "string"', () => {
        const resposta = numNaturalFn(0);

        expect(resposta).to.be.a('string');
      });

      it('√© igual a "neutro"', () => {
        const resposta = numNaturalFn(0);

        expect(resposta).to.be.equals('neutro');
      });
    });
  });
});
Exerc√≠cio 2
Implemente a fun√ß√£o apresentada no exerc√≠cio 1, garantindo que ela ir√° passar em todos os testes que voc√™ escreveu.
DICA : Lembre-se de adicionar o script de test no package.json e de instalar as depend√™ncias.
Resolu√ß√£o
Copiar
module.exports = (numero) => {
  if (numero > 0) {
    return 'positivo';
  }

  if (numero < 0) {
    return 'negativo';
  }

  return 'neutro';
};
Exerc√≠cio 3
Adicione √† fun√ß√£o um tratamento para casos em que o par√¢metro informado n√£o seja do tipo number .
Adicione o cen√°rio em seu arquivo de testes, passando um valor de tipo diferente a number para a fun√ß√£o;
Adicione uma asser√ß√£o para esperar que o valor retornado para esse caso seja igual uma string "o valor deve ser um n√∫mero";
Implemente em sua fun√ß√£o tal valida√ß√£o para que o teste passe.
Resolu√ß√£o
Copiar
// demais casos de teste

describe('quando o par√¢metro passado n√£o √© um n√∫mero', () => {
  describe('a resposta', () => {
    it('√© uma "string"', () => {
      const resposta = numNaturalFn('AAAA');

      expect(resposta).to.be.a('string');
    });

    it('√© igual a "o par√¢metro deve ser um n√∫mero"', () => {
      const resposta = numNaturalFn('AAAA');

      expect(resposta).to.be.equals('o par√¢metro deve ser um n√∫mero');
    });
  });
});
Copiar
module.exports = (numero) => {
  if (typeof numero !== 'number') {
    return 'o par√¢metro deve ser um n√∫mero';
  }

  if (numero > 0) {
    return 'positivo';
  }

  if (numero < 0) {
    return 'negativo';
  }

  return 'neutro';
};
Exerc√≠cio 4
Crie testes para uma fun√ß√£o que escrever√° um conte√∫do em um arquivo espec√≠fico.
Essa fun√ß√£o dever√° receber dois par√¢metros: o nome do arquivo e o conte√∫do desse arquivo.
Ap√≥s concluir a escrita do arquivo ela dever√° retornar um ok .
Descreva todos os cen√°rios de teste utilizando describes ;
Descreva todos os testes que ser√£o feitos utilizando its ;
Crie as asser√ß√µes validando se o retorno da fun√ß√£o possui o valor e tipo esperado.
Resolu√ß√£o
Copiar
const fs = require('fs');
const { expect } = require('chai');

const escrevaArquivo = require('./escrevaArquivo');

describe('Executa a fun√ß√£o escrevaArquivo', () => {
  describe('a resposta', () => {
    it('√© uma "string"', () => {
      const resposta = escrevaArquivo('arquivo.txt', '#vqv conte√∫do');

      expect(resposta).to.be.a('string');
    });

    it('√© igual a "ok"', () => {
      const resposta = escrevaArquivo('arquivo.txt', '#vqv conte√∫do');

      expect(resposta).to.be.equals('ok');
    });
  });
});
Exerc√≠cio 5
implemente a fun√ß√£o descrita no exerc√≠cio 4.
Crie a fun√ß√£o descrita no exerc√≠cio 4 utilizando o m√≥dulo fs do Node.
Adapte os testes adicionando stub ao m√≥dulo utilizado do fs , isolando assim o teste.
Garanta que todos os testes escritos no exerc√≠cio 4 ir√£o passar com sucesso.
Resolu√ß√£o
Copiar
const fs = require('fs');
const sinon = require('sinon');
const { expect } = require('chai');

const escrevaArquivo = require('./escrevaArquivo');

describe('Executa a fun√ß√£o escrevaArquivo', () => {
  before(() => {
    sinon.stub(fs, 'writeFileSync');
  });

  after(() => {
    fs.writeFileSync.restore();
  });

  describe('a resposta', () => {
    it('√© uma "string"', () => {
      const resposta = escrevaArquivo('arquivo.txt', '#vqv conte√∫do');

      expect(resposta).to.be.a('string');
    });

    it('√© igual a "ok"', () => {
      const resposta = escrevaArquivo('arquivo.txt', '#vqv conte√∫do');

      expect(resposta).to.be.equals('ok');
    });
  });
});
Copiar
const fs = require('fs');

module.exports = (nomeDoArquivo, conteudoDoArquivo) => {
  fs.writeFileSync(`${__dirname}/${nomeDoArquivo}`, conteudoDoArquivo);

  return 'ok';
};